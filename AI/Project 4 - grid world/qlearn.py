# -*- coding: utf-8 -*-
"""qlearn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14N9cBgjcWRocG_ax5nkQjiZuw_9QplHB
"""

import numpy as np
import requests
import random
import time
import json

moves = {0:'W',1:'E',2:'N',3:'S'}

api_key = '09a4264e15f0696ffe0d'
user_id = '1106'
team_id = '1321'
url = "https://www.notexponential.com/aip2pgaming/api/rl/gw.php"
url_score = "https://www.notexponential.com/aip2pgaming/api/rl/score.php"
world_id = 2

def get_score():
    response = requests.get(url=url_score, 
                             params={
                                     "type":"score",
                                     "teamId": team_id
                                 },
                             headers={
                                     "x-api-key":api_key,
                                     "userId":user_id,
                                     "User-Agent": "XY"                             
                             })
    response_dict = json.loads(response.content)
    score = int(response_dict["score"])
    return score

def get_location():
    response = requests.get(url=url, 
                             params={
                                     "type":"location",
                                     "teamId": team_id
                                 },
                             headers={
                                     "x-api-key":api_key,
                                     "userId":user_id,
                                     "User-Agent": "XY"                             
                             })
    response_dict = json.loads(response.content)
    state = response_dict["state"]
    state = tuple(map(int, state.split(":")))
    return  state

def get_runs(count):
  response = requests.get(url=url_score, 
                             params={
                                     "type":"runs",
                                     "teamId": team_id,
                                     "count" : count
                                 },
                             headers={
                                     "x-api-key":api_key,
                                     "userId":user_id,
                                     "User-Agent": "XY"                             
                             })
  return response.content

get_runs(2)

def enter_world():
  response = requests.post(url=url, 
                             data={
                                     "type":'enter',
                                     "worldId": world_id,
                                     "teamId": team_id,
                                 },
                             headers={
                                     "x-api-key":api_key,
                                     "userId":user_id,
                                     "User-Agent": "XY"                             
                             })
  response_dict = json.loads(response.content)
  assert(response_dict["code"] != "FAIL")
  state = response_dict["state"]
  state = tuple(map(int, state.split(":")))
  return state

from IPython.display import clear_output
def print_state(state):
  for x in range(40):
    for y in range(40):
      if(x == state[0] and y == state[1]):
        print('X', end = ' ')
      else:
        print('O', end =' ')
    print('')
def print_q(q_table):
  for x in range(40):
    for y in range(40):
      print('%.1f'%q_table[x][y].max(), end = ' ')
    print('')

def reset_teams():
  response = requests.get(url="https://www.notexponential.com/aip2pgaming/api/rl/reset.php", 
                             data={
                                     "otp ":"5712768807",
                                     "teamId": team_id,
                                 },
                             headers={
                                     "x-api-key":api_key,
                                     "userId":user_id,
                                     "User-Agent": "XY"                             
                             })
  return response.content

reset_teams()

def make_move(action):
  move = moves[action]
  move_response = requests.post(url=url, 
                             data={
                                 "move":move,
                                 "type":"move",
                                 "teamId":team_id,
                                 "worldId":world_id,
                                 },
                             headers={
                                 "x-api-key":api_key,
                                 "userId":user_id,
                                 "User-Agent": "XY"                             
                             })
  move_response_dict = json.loads(move_response.text)
  # print(move_response.text)
  reward = move_response_dict['reward']
  scoreIncrement = move_response_dict['scoreIncrement']
  if move_response_dict["newState"] == None:
    exit = True
    newState = (-1, -1)
  else:
    exit = False
    newState = (int(move_response_dict['newState']['x']), int(move_response_dict['newState']['y']))
  return newState, reward, exit, scoreIncrement

def run(lr = 0.99, gamma = 0.9, epsilon = 1):
  epoch = 0
  wins = 0
  move_weights = np.array([0.0000001,0.0000001,0.0000001,0.0000001])
  while(True):
    if(epoch > 0):
      return 
    epoch += 1
    try:
      state = enter_world()
    except:
      state = get_location()
    exit = False
    score = 0
    move_no = 0
    # epsilon = epsilon
    while(exit==False):
      move_no += 1
      if random.uniform(0, 1) < epsilon:
        # explore
        action = random.choices([0,1,2,3])[0]
      else:
        # exploit
        action = np.argmax(q_table[state[0]][state[1]])
      move_weights[action]+=1
      #print_state(action, state)
      # Send request to get new states
      new_state, reward, exit, scoreIncrement = make_move(action)
      if(reward > 100):
        wins+= 1
      score += scoreIncrement
      clear_output(wait=True)
      if move_no%100==0:
        print("Epoch №: ", epoch)
        print("Win count: ", wins)
        print("Loss count: ", epoch - wins - 1)
        print("Move №: ", move_no)
        print("Action: ", moves[action])
        print("State: ", state)
        print("Next State: ", new_state)
        print("Reward: ", reward)
        print("Score: ", score)
        print('Epsilon:', epsilon)
        # heatmap(q_table)
      q_table[state[0]][state[1]][action] = q_table[state[0]][state[1]][action] + \
        lr*(reward + gamma*np.max(q_table[new_state[0]][new_state[1]]) - q_table[state[0]][state[1]][action])

      # heatmap(q_table)
      state = new_state
      if epsilon > 0.2:
        epsilon *= 0.9999
    print(score)

    # run make move

q_table = np.ones((40, 40, 4))
#q_table = np.load("q_table.npy")

run(epsilon = 1, gamma=0.90)

get_runs(100)

import matplotlib.pyplot as plt
import seaborn as sns
def heatmap(q_table):
  q = np.max(q_table, axis = 2)
  fig, ax = plt.subplots(figsize = (20, 15))
  sns.heatmap(q)
  plt.show()

heatmap(q_table)

make_move(2)



np.save('world_1_q_table.npy', q_table)





